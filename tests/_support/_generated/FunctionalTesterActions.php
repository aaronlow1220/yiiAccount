<?php

// [STAMP] 18e7dfa56db9a6ec96e2d96a29bf06a7
// phpcs:ignoreFile

namespace _generated;

use ArrayAccess;
use Codeception\Exception\ModuleException;
use Codeception\Scenario;
use Codeception\Step\Action;
use Codeception\Step\Assertion;
use Codeception\Step\Condition;
use Codeception\Step\ConditionalAssertion;
use Countable;
use DOMDocument;
use PHPUnit\Framework\Constraint\Constraint;
use Throwable;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build

trait FunctionalTesterActions
{
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Enters a directory In local filesystem.
     * Project root directory is used by default
     *
     * @see \Codeception\Module\Filesystem::amInPath()
     *
     * @param string $path
     */
    public function amInPath(string $path): void
    {
        $this->getScenario()->runStep(new Condition('amInPath', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens a file and stores it's content.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ```
     *
     * @see \Codeception\Module\Filesystem::openFile()
     *
     * @param string $filename
     */
    public function openFile(string $filename): void
    {
        $this->getScenario()->runStep(new Action('openFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes a file
     *
     * ``` php
     * <?php
     * $I->deleteFile('composer.lock');
     * ```
     *
     * @see \Codeception\Module\Filesystem::deleteFile()
     *
     * @param string $filename
     */
    public function deleteFile(string $filename): void
    {
        $this->getScenario()->runStep(new Action('deleteFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes directory with all subdirectories
     *
     * ``` php
     * <?php
     * $I->deleteDir('vendor');
     * ```
     *
     * @see \Codeception\Module\Filesystem::deleteDir()
     *
     * @param string $dirname
     */
    public function deleteDir(string $dirname): void
    {
        $this->getScenario()->runStep(new Action('deleteDir', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Copies directory with all contents
     *
     * ``` php
     * <?php
     * $I->copyDir('vendor','old_vendor');
     * ```
     *
     * @see \Codeception\Module\Filesystem::copyDir()
     *
     * @param string $src
     * @param string $dst
     */
    public function copyDir(string $src, string $dst): void
    {
        $this->getScenario()->runStep(new Action('copyDir', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file has `text` in it.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ```
     *
     * @see \Codeception\Module\Filesystem::seeInThisFile()
     *
     * @param string $text
     */
    public function seeInThisFile(string $text): void
    {
        $this->getScenario()->runStep(new Assertion('seeInThisFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file has `text` in it.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ```
     *
     * @see \Codeception\Module\Filesystem::seeInThisFile()
     *
     * @param string $text
     */
    public function canSeeInThisFile(string $text): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeInThisFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file has the `number` of new lines.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeNumberNewLines(5);
     * ```
     *
     * @param int $number New lines
     *
     * @see \Codeception\Module\Filesystem::seeNumberNewLines()
     */
    public function seeNumberNewLines(int $number): void
    {
        $this->getScenario()->runStep(new Assertion('seeNumberNewLines', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file has the `number` of new lines.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeNumberNewLines(5);
     * ```
     *
     * @param int $number New lines
     *
     * @see \Codeception\Module\Filesystem::seeNumberNewLines()
     */
    public function canSeeNumberNewLines(int $number): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeNumberNewLines', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that contents of currently opened file matches $regex
     *
     * @see \Codeception\Module\Filesystem::seeThisFileMatches()
     *
     * @param string $regex
     */
    public function seeThisFileMatches(string $regex): void
    {
        $this->getScenario()->runStep(new Assertion('seeThisFileMatches', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that contents of currently opened file matches $regex
     *
     * @see \Codeception\Module\Filesystem::seeThisFileMatches()
     *
     * @param string $regex
     */
    public function canSeeThisFileMatches(string $regex): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeThisFileMatches', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks the strict matching of file contents.
     * Unlike `seeInThisFile` will fail if file has something more than expected lines.
     * Better to use with HEREDOC strings.
     * Matching is done after removing "\r" chars from file content.
     *
     * ``` php
     * <?php
     * $I->openFile('process.pid');
     * $I->seeFileContentsEqual('3192');
     * ```
     *
     * @see \Codeception\Module\Filesystem::seeFileContentsEqual()
     *
     * @param string $text
     */
    public function seeFileContentsEqual(string $text): void
    {
        $this->getScenario()->runStep(new Assertion('seeFileContentsEqual', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks the strict matching of file contents.
     * Unlike `seeInThisFile` will fail if file has something more than expected lines.
     * Better to use with HEREDOC strings.
     * Matching is done after removing "\r" chars from file content.
     *
     * ``` php
     * <?php
     * $I->openFile('process.pid');
     * $I->seeFileContentsEqual('3192');
     * ```
     *
     * @see \Codeception\Module\Filesystem::seeFileContentsEqual()
     *
     * @param string $text
     */
    public function canSeeFileContentsEqual(string $text): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeFileContentsEqual', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file doesn't contain `text` in it
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->dontSeeInThisFile('codeception/codeception');
     * ```
     *
     * @see \Codeception\Module\Filesystem::dontSeeInThisFile()
     *
     * @param string $text
     */
    public function dontSeeInThisFile(string $text): void
    {
        $this->getScenario()->runStep(new Action('dontSeeInThisFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file doesn't contain `text` in it
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->dontSeeInThisFile('codeception/codeception');
     * ```
     *
     * @see \Codeception\Module\Filesystem::dontSeeInThisFile()
     *
     * @param string $text
     */
    public function cantSeeInThisFile(string $text): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeInThisFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes a file
     *
     * @see \Codeception\Module\Filesystem::deleteThisFile()
     */
    public function deleteThisFile(): void
    {
        $this->getScenario()->runStep(new Action('deleteThisFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file exists in path.
     * Opens a file when it's exists
     *
     * ``` php
     * <?php
     * $I->seeFileFound('UserModel.php','app/models');
     * ```
     *
     * @see \Codeception\Module\Filesystem::seeFileFound()
     *
     * @param string $filename
     * @param string $path
     */
    public function seeFileFound(string $filename, string $path = ''): void
    {
        $this->getScenario()->runStep(new Assertion('seeFileFound', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if file exists in path.
     * Opens a file when it's exists
     *
     * ``` php
     * <?php
     * $I->seeFileFound('UserModel.php','app/models');
     * ```
     *
     * @see \Codeception\Module\Filesystem::seeFileFound()
     *
     * @param string $filename
     * @param string $path
     */
    public function canSeeFileFound(string $filename, string $path = ''): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeFileFound', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file does not exist in path
     *
     * @see \Codeception\Module\Filesystem::dontSeeFileFound()
     *
     * @param string $filename
     * @param string $path
     */
    public function dontSeeFileFound(string $filename, string $path = ''): void
    {
        $this->getScenario()->runStep(new Action('dontSeeFileFound', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if file does not exist in path
     *
     * @see \Codeception\Module\Filesystem::dontSeeFileFound()
     *
     * @param string $filename
     * @param string $path
     */
    public function cantSeeFileFound(string $filename, string $path = ''): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeFileFound', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Erases directory contents
     *
     * ``` php
     * <?php
     * $I->cleanDir('logs');
     * ```
     *
     * @see \Codeception\Module\Filesystem::cleanDir()
     *
     * @param string $dirname
     */
    public function cleanDir(string $dirname): void
    {
        $this->getScenario()->runStep(new Action('cleanDir', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Saves contents to file
     *
     * @see \Codeception\Module\Filesystem::writeToFile()
     *
     * @param string $filename
     * @param string $contents
     */
    public function writeToFile(string $filename, string $contents): void
    {
        $this->getScenario()->runStep(new Action('writeToFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Authenticates a user on a site without submitting a login form.
     * Use it for fast pragmatic authorization in functional tests.
     *
     * ```php
     * <?php
     * // User is found by id
     * $I->amLoggedInAs(1);
     *
     * // User object is passed as parameter
     * $admin = \app\models\User::findByUsername('admin');
     * $I->amLoggedInAs($admin);
     * ```
     * Requires the `user` component to be enabled and configured.
     *
     * @param $user
     * @throws ModuleException
     *
     * @see \Codeception\Module\Yii2::amLoggedInAs()
     */
    public function amLoggedInAs($user)
    {
        return $this->getScenario()->runStep(new Condition('amLoggedInAs', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Creates and loads fixtures from a config.
     * The signature is the same as for the `fixtures()` method of `yii\test\FixtureTrait`
     *
     * ```php
     * <?php
     * $I->haveFixtures([
     *     'posts' => PostsFixture::class,
     *     'user' => [
     *         'class' => UserFixture::class,
     *         'dataFile' => '@tests/_data/models/user.php',
     *      ],
     * ]);
     * ```
     *
     * Note: if you need to load fixtures before a test (probably before the
     * cleanup transaction is started; `cleanup` option is `true` by default),
     * you can specify the fixtures in the `_fixtures()` method of a test case
     *
     * ```php
     * <?php
     * // inside Cest file or Codeception\TestCase\Unit
     * public function _fixtures(){
     *     return [
     *         'user' => [
     *             'class' => UserFixture::class,
     *             'dataFile' => codecept_data_dir() . 'user.php'
     *         ]
     *     ];
     * }
     * ```
     * instead of calling `haveFixtures` in Cest `_before`
     *
     * @param $fixtures
     * @part fixtures
     *
     * @see \Codeception\Module\Yii2::haveFixtures()
     */
    public function haveFixtures($fixtures)
    {
        return $this->getScenario()->runStep(new Action('haveFixtures', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns all loaded fixtures.
     * Array of fixture instances
     *
     * @part fixtures
     * @return array
     *
     * @see \Codeception\Module\Yii2::grabFixtures()
     */
    public function grabFixtures()
    {
        return $this->getScenario()->runStep(new Action('grabFixtures', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Gets a fixture by name.
     * Returns a Fixture instance. If a fixture is an instance of
     * `\yii\test\BaseActiveFixture` a second parameter can be used to return a
     * specific model:
     *
     * ```php
     * <?php
     * $I->haveFixtures(['users' => UserFixture::class]);
     *
     * $users = $I->grabFixture('users');
     *
     * // get first user by key, if a fixture is an instance of ActiveFixture
     * $user = $I->grabFixture('users', 'user1');
     * ```
     *
     * @param $name
     * @param null|mixed $index
     * @throws ModuleException if the fixture is not found
     * @return mixed
     * @part fixtures
     *
     * @see \Codeception\Module\Yii2::grabFixture()
     */
    public function grabFixture($name, $index = null)
    {
        return $this->getScenario()->runStep(new Action('grabFixture', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a record into the database.
     *
     * ``` php
     * <?php
     * $user_id = $I->haveRecord('app\models\User', array('name' => 'Davert'));
     * ?>
     * ```
     *
     * @param $model
     * @param array $attributes
     * @return mixed
     * @part orm
     *
     * @see \Codeception\Module\Yii2::haveRecord()
     */
    public function haveRecord($model, $attributes = [])
    {
        return $this->getScenario()->runStep(new Action('haveRecord', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a record exists in the database.
     *
     * ``` php
     * $I->seeRecord('app\models\User', array('name' => 'davert'));
     * ```
     *
     * @param $model
     * @param array $attributes
     * @part orm
     *
     * @see \Codeception\Module\Yii2::seeRecord()
     */
    public function seeRecord(string $model, array $attributes = []): void
    {
        $this->getScenario()->runStep(new Assertion('seeRecord', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that a record exists in the database.
     *
     * ``` php
     * $I->seeRecord('app\models\User', array('name' => 'davert'));
     * ```
     *
     * @param $model
     * @param array $attributes
     * @part orm
     *
     * @see \Codeception\Module\Yii2::seeRecord()
     */
    public function canSeeRecord(string $model, array $attributes = []): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeRecord', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a record does not exist in the database.
     *
     * ``` php
     * $I->dontSeeRecord('app\models\User', array('name' => 'davert'));
     * ```
     *
     * @param $model
     * @param array $attributes
     * @part orm
     *
     * @see \Codeception\Module\Yii2::dontSeeRecord()
     */
    public function dontSeeRecord(string $model, array $attributes = []): void
    {
        $this->getScenario()->runStep(new Action('dontSeeRecord', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that a record does not exist in the database.
     *
     * ``` php
     * $I->dontSeeRecord('app\models\User', array('name' => 'davert'));
     * ```
     *
     * @param $model
     * @param array $attributes
     * @part orm
     *
     * @see \Codeception\Module\Yii2::dontSeeRecord()
     */
    public function cantSeeRecord(string $model, array $attributes = []): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeRecord', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Retrieves a record from the database
     *
     * ``` php
     * $category = $I->grabRecord('app\models\User', array('name' => 'davert'));
     * ```
     *
     * @param $model
     * @param array $attributes
     * @return mixed
     * @part orm
     *
     * @see \Codeception\Module\Yii2::grabRecord()
     */
    public function grabRecord(string $model, array $attributes = []): mixed
    {
        return $this->getScenario()->runStep(new Action('grabRecord', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Similar to `amOnPage` but accepts a route as first argument and params as second
     *
     * ```
     * $I->amOnRoute('site/view', ['page' => 'about']);
     * ```
     *
     * @param string $route A route
     * @param array $params Additional route parameters
     *
     * @see \Codeception\Module\Yii2::amOnRoute()
     */
    public function amOnRoute(string $route, array $params = []): void
    {
        $this->getScenario()->runStep(new Condition('amOnRoute', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens the page for the given relative URI or route.
     *
     * ``` php
     * <?php
     * // opens front page
     * $I->amOnPage('/');
     * // opens /register page
     * $I->amOnPage('/register');
     * ```
     *
     * @param string $page the page URI
     *
     * @see \Codeception\Module\Yii2::amOnPage()
     */
    public function amOnPage(string $page): void
    {
        $this->getScenario()->runStep(new Condition('amOnPage', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Gets a component from the Yii container. Throws an exception if the
     * component is not available
     *
     * ```php
     * <?php
     * $mailer = $I->grabComponent('mailer');
     * ```
     *
     * @param $component
     * @throws ModuleException
     * @return mixed
     *
     * @deprecated in your tests you can use \Yii::$app directly
     * @see \Codeception\Module\Yii2::grabComponent()
     */
    public function grabComponent(mixed $component)
    {
        return $this->getScenario()->runStep(new Action('grabComponent', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an email is sent.
     *
     * ```php
     * <?php
     * // check that at least 1 email was sent
     * $I->seeEmailIsSent();
     *
     * // check that only 3 emails were sent
     * $I->seeEmailIsSent(3);
     * ```
     *
     * @param int $num
     * @throws ModuleException
     * @part email
     *
     * @see \Codeception\Module\Yii2::seeEmailIsSent()
     */
    public function seeEmailIsSent(?int $num = null): void
    {
        $this->getScenario()->runStep(new Assertion('seeEmailIsSent', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that an email is sent.
     *
     * ```php
     * <?php
     * // check that at least 1 email was sent
     * $I->seeEmailIsSent();
     *
     * // check that only 3 emails were sent
     * $I->seeEmailIsSent(3);
     * ```
     *
     * @param int $num
     * @throws ModuleException
     * @part email
     *
     * @see \Codeception\Module\Yii2::seeEmailIsSent()
     */
    public function canSeeEmailIsSent(?int $num = null): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeEmailIsSent', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that no email was sent
     *
     * @part email
     *
     * @see \Codeception\Module\Yii2::dontSeeEmailIsSent()
     */
    public function dontSeeEmailIsSent(): void
    {
        $this->getScenario()->runStep(new Action('dontSeeEmailIsSent', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that no email was sent
     *
     * @part email
     *
     * @see \Codeception\Module\Yii2::dontSeeEmailIsSent()
     */
    public function cantSeeEmailIsSent(): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeEmailIsSent', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns array of all sent email messages.
     * Each message implements the `yii\mail\MessageInterface` interface.
     * Useful to perform additional checks using the `Asserts` module:
     *
     * ```php
     * <?php
     * $I->seeEmailIsSent();
     * $messages = $I->grabSentEmails();
     * $I->assertEquals('admin@site,com', $messages[0]->getTo());
     * ```
     *
     * @part email
     * @throws ModuleException
     * @return array
     *
     * @see \Codeception\Module\Yii2::grabSentEmails()
     */
    public function grabSentEmails(): array
    {
        return $this->getScenario()->runStep(new Action('grabSentEmails', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the last sent email:
     *
     * ```php
     * <?php
     * $I->seeEmailIsSent();
     * $message = $I->grabLastSentEmail();
     * $I->assertEquals('admin@site,com', $message->getTo());
     * ```
     *
     * @part email
     *
     * @see \Codeception\Module\Yii2::grabLastSentEmail()
     */
    public function grabLastSentEmail(): object
    {
        return $this->getScenario()->runStep(new Action('grabLastSentEmail', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns a list of regex patterns for recognized domain names
     *
     * @return array
     *
     * @see \Codeception\Module\Yii2::getInternalDomains()
     */
    public function getInternalDomains(): array
    {
        return $this->getScenario()->runStep(new Action('getInternalDomains', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets a cookie and, if validation is enabled, signs it.
     *
     * @param string $name The name of the cookie
     * @param string $val The value of the cookie
     * @param array $params additional cookie params like `domain`, `path`, `expires` and `secure`
     *
     * @see \Codeception\Module\Yii2::setCookie()
     */
    public function setCookie($name, $val, $params = [])
    {
        return $this->getScenario()->runStep(new Action('setCookie', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Creates the CSRF Cookie.
     *
     * @param string $val The value of the CSRF token
     * @return string[] returns an array containing the name of the CSRF param and the masked CSRF token
     *
     * @see \Codeception\Module\Yii2::createAndSetCsrfCookie()
     */
    public function createAndSetCsrfCookie(string $val): array
    {
        return $this->getScenario()->runStep(new Action('createAndSetCsrfCookie', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Authenticates user for HTTP_AUTH
     *
     * @see \Codeception\Lib\InnerBrowser::amHttpAuthenticated()
     *
     * @param string $username
     * @param string $password
     */
    public function amHttpAuthenticated(string $username, string $password): void
    {
        $this->getScenario()->runStep(new Condition('amHttpAuthenticated', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets the HTTP header to the passed value - which is used on
     * subsequent HTTP requests through PhpBrowser.
     *
     * Example:
     * ```php
     * <?php
     * $I->haveHttpHeader('X-Requested-With', 'Codeception');
     * $I->amOnPage('test-headers.php');
     * ```
     *
     * To use special chars in Header Key use HTML Character Entities:
     * Example:
     * Header with underscore - 'Client_Id'
     * should be represented as - 'Client&#x0005F;Id' or 'Client&#95;Id'
     *
     * ```php
     * <?php
     * $I->haveHttpHeader('Client&#95;Id', 'Codeception');
     * ```
     *
     * @param string $name the name of the request header
     * @param string $value the value to set it to for subsequent
     *                      requests
     *
     * @see \Codeception\Lib\InnerBrowser::haveHttpHeader()
     */
    public function haveHttpHeader(string $name, string $value): void
    {
        $this->getScenario()->runStep(new Action('haveHttpHeader', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes the header with the passed name.  Subsequent requests
     * will not have the deleted header in its request.
     *
     * Example:
     * ```php
     * <?php
     * $I->haveHttpHeader('X-Requested-With', 'Codeception');
     * $I->amOnPage('test-headers.php');
     * // ...
     * $I->deleteHeader('X-Requested-With');
     * $I->amOnPage('some-other-page.php');
     * ```
     *
     * @param string $name the name of the header to delete
     *
     * @see \Codeception\Lib\InnerBrowser::deleteHeader()
     */
    public function deleteHeader(string $name): void
    {
        $this->getScenario()->runStep(new Action('deleteHeader', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Perform a click on a link or a button, given by a locator.
     * If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.
     * For buttons, the "value" attribute, "name" attribute, and inner text are searched.
     * For links, the link text is searched.
     * For images, the "alt" attribute and inner text of any parent links are searched.
     *
     * The second parameter is a context (CSS or XPath locator) to narrow the search.
     *
     * Note that if the locator matches a button of type `submit`, the form will be submitted.
     *
     * ```php
     * <?php
     * // simple link
     * $I->click('Logout');
     * // button of form
     * $I->click('Submit');
     * // CSS button
     * $I->click('#form input[type=submit]');
     * // XPath
     * $I->click('//form/*[@var="submit"]');
     * // link in context
     * $I->click('Logout', '#nav');
     * // using strict locator
     * $I->click(['link' => 'Login']);
     * ```
     *
     * @param array|string $link
     * @param null|mixed $context
     *
     * @see \Codeception\Lib\InnerBrowser::click()
     */
    public function click($link, $context = null): void
    {
        $this->getScenario()->runStep(new Action('click', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ```php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     *
     * @see \Codeception\Lib\InnerBrowser::see()
     */
    public function see(string $text, $selector = null): void
    {
        $this->getScenario()->runStep(new Assertion('see', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ```php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     *
     * @see \Codeception\Lib\InnerBrowser::see()
     */
    public function canSee(string $text, $selector = null): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('see', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     *
     * @see \Codeception\Lib\InnerBrowser::dontSee()
     */
    public function dontSee(string $text, $selector = null): void
    {
        $this->getScenario()->runStep(new Action('dontSee', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     *
     * @see \Codeception\Lib\InnerBrowser::dontSee()
     */
    public function cantSee(string $text, $selector = null): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSee', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeInSource()
     *
     * @param string $raw
     */
    public function seeInSource(string $raw): void
    {
        $this->getScenario()->runStep(new Assertion('seeInSource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeInSource()
     *
     * @param string $raw
     */
    public function canSeeInSource(string $raw): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeInSource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInSource()
     *
     * @param string $raw
     */
    public function dontSeeInSource(string $raw): void
    {
        $this->getScenario()->runStep(new Action('dontSeeInSource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInSource()
     *
     * @param string $raw
     */
    public function cantSeeInSource(string $raw): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeInSource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ```php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeLink()
     *
     * @param string $text
     * @param ?string $url
     */
    public function seeLink(string $text, ?string $url = null): void
    {
        $this->getScenario()->runStep(new Assertion('seeLink', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ```php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeLink()
     *
     * @param string $text
     * @param ?string $url
     */
    public function canSeeLink(string $text, ?string $url = null): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeLink', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ```php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeLink()
     *
     * @param string $text
     * @param string $url
     */
    public function dontSeeLink(string $text, string $url = ''): void
    {
        $this->getScenario()->runStep(new Action('dontSeeLink', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ```php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeLink()
     *
     * @param string $text
     * @param string $url
     */
    public function cantSeeLink(string $text, string $url = ''): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeLink', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current URI contains the given string.
     *
     * ```php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeInCurrentUrl()
     *
     * @param string $uri
     */
    public function seeInCurrentUrl(string $uri): void
    {
        $this->getScenario()->runStep(new Assertion('seeInCurrentUrl', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current URI contains the given string.
     *
     * ```php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeInCurrentUrl()
     *
     * @param string $uri
     */
    public function canSeeInCurrentUrl(string $uri): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeInCurrentUrl', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URI doesn't contain the given string.
     *
     * ```php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInCurrentUrl()
     *
     * @param string $uri
     */
    public function dontSeeInCurrentUrl(string $uri): void
    {
        $this->getScenario()->runStep(new Action('dontSeeInCurrentUrl', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URI doesn't contain the given string.
     *
     * ```php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInCurrentUrl()
     *
     * @param string $uri
     */
    public function cantSeeInCurrentUrl(string $uri): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeInCurrentUrl', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlEquals()
     *
     * @param string $uri
     */
    public function seeCurrentUrlEquals(string $uri): void
    {
        $this->getScenario()->runStep(new Assertion('seeCurrentUrlEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlEquals()
     *
     * @param string $uri
     */
    public function canSeeCurrentUrlEquals(string $uri): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeCurrentUrlEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ```php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlEquals()
     *
     * @param string $uri
     */
    public function dontSeeCurrentUrlEquals(string $uri): void
    {
        $this->getScenario()->runStep(new Action('dontSeeCurrentUrlEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ```php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlEquals()
     *
     * @param string $uri
     */
    public function cantSeeCurrentUrlEquals(string $uri): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeCurrentUrlEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL matches the given regular expression.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlMatches()
     *
     * @param string $uri
     */
    public function seeCurrentUrlMatches(string $uri): void
    {
        $this->getScenario()->runStep(new Assertion('seeCurrentUrlMatches', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL matches the given regular expression.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlMatches()
     *
     * @param string $uri
     */
    public function canSeeCurrentUrlMatches(string $uri): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeCurrentUrlMatches', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current url doesn't match the given regular expression.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlMatches()
     *
     * @param string $uri
     */
    public function dontSeeCurrentUrlMatches(string $uri): void
    {
        $this->getScenario()->runStep(new Action('dontSeeCurrentUrlMatches', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current url doesn't match the given regular expression.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlMatches()
     *
     * @param string $uri
     */
    public function cantSeeCurrentUrlMatches(string $uri): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeCurrentUrlMatches', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes the given regular expression against the current URI and returns the first capturing group.
     * If no parameters are provided, the full URI is returned.
     *
     * ```php
     * <?php
     * $user_id = $I->grabFromCurrentUrl('~^/user/(\d+)/~');
     * $uri = $I->grabFromCurrentUrl();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::grabFromCurrentUrl()
     *
     * @param ?string $uri
     */
    public function grabFromCurrentUrl(?string $uri = null): mixed
    {
        return $this->getScenario()->runStep(new Action('grabFromCurrentUrl', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the specified checkbox is checked.
     *
     * ```php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@var=checkbox and @name=agree]');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeCheckboxIsChecked()
     *
     * @param mixed $checkbox
     */
    public function seeCheckboxIsChecked($checkbox): void
    {
        $this->getScenario()->runStep(new Assertion('seeCheckboxIsChecked', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the specified checkbox is checked.
     *
     * ```php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@var=checkbox and @name=agree]');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeCheckboxIsChecked()
     *
     * @param mixed $checkbox
     */
    public function canSeeCheckboxIsChecked($checkbox): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeCheckboxIsChecked', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that the specified checkbox is unchecked.
     *
     * ```php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCheckboxIsChecked()
     *
     * @param mixed $checkbox
     */
    public function dontSeeCheckboxIsChecked($checkbox): void
    {
        $this->getScenario()->runStep(new Action('dontSeeCheckboxIsChecked', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Check that the specified checkbox is unchecked.
     *
     * ```php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCheckboxIsChecked()
     *
     * @param mixed $checkbox
     */
    public function cantSeeCheckboxIsChecked($checkbox): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeCheckboxIsChecked', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ```php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ```
     *
     * @param array|string $field
     * @param mixed $value
     *
     * @see \Codeception\Lib\InnerBrowser::seeInField()
     */
    public function seeInField($field, $value): void
    {
        $this->getScenario()->runStep(new Assertion('seeInField', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ```php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ```
     *
     * @param array|string $field
     * @param mixed $value
     *
     * @see \Codeception\Lib\InnerBrowser::seeInField()
     */
    public function canSeeInField($field, $value): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeInField', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ```php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ```
     *
     * @param array|string $field
     * @param mixed $value
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInField()
     */
    public function dontSeeInField($field, $value): void
    {
        $this->getScenario()->runStep(new Action('dontSeeInField', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ```php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ```
     *
     * @param array|string $field
     * @param mixed $value
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInField()
     */
    public function cantSeeInField($field, $value): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeInField', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ```php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ```php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ```php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ```php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', string $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', string $form);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeInFormFields()
     *
     * @param mixed $formSelector
     * @param array $params
     */
    public function seeInFormFields($formSelector, array $params): void
    {
        $this->getScenario()->runStep(new Assertion('seeInFormFields', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ```php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ```php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ```php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ```php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', string $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', string $form);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeInFormFields()
     *
     * @param mixed $formSelector
     * @param array $params
     */
    public function canSeeInFormFields($formSelector, array $params): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeInFormFields', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInFormFields()
     *
     * @param mixed $formSelector
     * @param array $params
     */
    public function dontSeeInFormFields($formSelector, array $params): void
    {
        $this->getScenario()->runStep(new Action('dontSeeInFormFields', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInFormFields()
     *
     * @param mixed $formSelector
     * @param array $params
     */
    public function cantSeeInFormFields($formSelector, array $params): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeInFormFields', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Submits the given form on the page, with the given form
     * values.  Pass the form field's values as an array in the second
     * parameter.
     *
     * Although this function can be used as a short-hand version of
     * `fillField()`, `selectOption()`, `click()` etc. it has some important
     * differences:
     *
     *  * Only field *names* may be used, not CSS/XPath selectors nor field labels
     *  * If a field is sent to this function that does *not* exist on the page,
     *    it will silently be added to the HTTP request.  This is helpful for testing
     *    some types of forms, but be aware that you will *not* get an exception
     *    like you would if you called `fillField()` or `selectOption()` with
     *    a missing field.
     *
     * Fields that are not provided will be filled by their values from the page,
     * or from any previous calls to `fillField()`, `selectOption()` etc.
     * You don't need to click the 'Submit' button afterwards.
     * This command itself triggers the request to form's action.
     *
     * You can optionally specify which button's value to include
     * in the request with the last parameter (as an alternative to
     * explicitly setting its value in the second parameter), as
     * button values are not otherwise included in the request.
     *
     * Examples:
     *
     * ```php
     * <?php
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ]);
     * // or
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ], 'submitButtonName');
     *
     * ```
     *
     * For example, given this sample "Sign Up" form:
     *
     * ``` html
     * <form id="userForm">
     *     Login:
     *     <input type="text" name="user[login]" /><br/>
     *     Password:
     *     <input type="password" name="user[password]" /><br/>
     *     Do you agree to our terms?
     *     <input type="checkbox" name="user[agree]" /><br/>
     *     Subscribe to our newsletter?
     *     <input type="checkbox" name="user[newsletter]" value="1" checked="checked" /><br/>
     *     Select pricing plan:
     *     <select name="plan">
     *         <option value="1">Free</option>
     *         <option value="2" selected="selected">Paid</option>
     *     </select>
     *     <input type="submit" name="submitButton" value="Submit" />
     * </form>
     * ```
     *
     * You could write the following to submit it:
     *
     * ```php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user' => [
     *             'login' => 'Davert',
     *             'password' => '123456',
     *             'agree' => true
     *         ]
     *     ],
     *     'submitButton'
     * );
     * ```
     * Note that "2" will be the submitted value for the "plan" field, as it is
     * the selected option.
     *
     * To uncheck the pre-checked checkbox "newsletter", call `$I->uncheckOption(['name' => 'user[newsletter]']);` *before*,
     * then submit the form as shown here (i.e. without the "newsletter" field in the `$params` array).
     *
     * You can also emulate a JavaScript submission by not specifying any
     * buttons in the third parameter to submitForm.
     *
     * ```php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user' => [
     *             'login' => 'Davert',
     *             'password' => '123456',
     *             'agree' => true
     *         ]
     *     ]
     * );
     * ```
     *
     * This function works well when paired with `seeInFormFields()`
     * for quickly testing CRUD interfaces and form validation logic.
     *
     * ```php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('#my-form', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('#my-form', $form);
     * ```
     *
     * Parameter values can be set to arrays for multiple input fields
     * of the same name, or multi-select combo boxes.  For checkboxes,
     * you can use either the string value or boolean `true`/`false` which will
     * be replaced by the checkbox's value in the DOM.
     *
     * ```php
     * <?php
     * $I->submitForm('#my-form', [
     *      'field1' => 'value',
     *      'checkbox' => [
     *          'value of first checkbox',
     *          'value of second checkbox',
     *      ],
     *      'otherCheckboxes' => [
     *          true,
     *          false,
     *          false
     *      ],
     *      'multiselect' => [
     *          'first option value',
     *          'second option value'
     *      ]
     * ]);
     * ```
     *
     * Mixing string and boolean values for a checkbox's value is not supported
     * and may produce unexpected results.
     *
     * Field names ending in `[]` must be passed without the trailing square
     * bracket characters, and must contain an array for its value.  This allows
     * submitting multiple values with the same name, consider:
     *
     * ```php
     * <?php
     * // This will NOT work correctly
     * $I->submitForm('#my-form', [
     *     'field[]' => 'value',
     *     'field[]' => 'another value',  // 'field[]' is already a defined key
     * ]);
     * ```
     *
     * The solution is to pass an array value:
     *
     * ```php
     * <?php
     * // This way both values are submitted
     * $I->submitForm('#my-form', [
     *     'field' => [
     *         'value',
     *         'another value',
     *     ]
     * ]);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::submitForm()
     *
     * @param mixed $selector
     * @param array $params
     * @param ?string $button
     */
    public function submitForm($selector, array $params, ?string $button = null): void
    {
        $this->getScenario()->runStep(new Action('submitForm', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fills a text field or textarea with the given string.
     *
     * ```php
     * <?php
     * $I->fillField("//input[@type='text']", "Hello World!");
     * $I->fillField(['name' => 'email'], 'jon@example.com');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::fillField()
     *
     * @param mixed $field
     * @param mixed $value
     */
    public function fillField($field, $value): void
    {
        $this->getScenario()->runStep(new Action('fillField', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Selects an option in a select tag or in radio button group.
     *
     * ```php
     * <?php
     * $I->selectOption('form select[name=account]', 'Premium');
     * $I->selectOption('form input[name=payment]', 'Monthly');
     * $I->selectOption('//form/select[@name=account]', 'Monthly');
     * ```
     *
     * Provide an array for the second argument to select multiple options:
     *
     * ```php
     * <?php
     * $I->selectOption('Which OS do you use?', ['Windows', 'Linux']);
     * ```
     *
     * Or provide an associative array for the second argument to specifically define which selection method should be used:
     *
     * ```php
     * <?php
     * $I->selectOption('Which OS do you use?', ['text' => 'Windows']); // Only search by text 'Windows'
     * $I->selectOption('Which OS do you use?', ['value' => 'windows']); // Only search by value 'windows'
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::selectOption()
     *
     * @param mixed $select
     * @param mixed $option
     */
    public function selectOption($select, $option): void
    {
        $this->getScenario()->runStep(new Action('selectOption', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Ticks a checkbox. For radio buttons, use the `selectOption` method instead.
     *
     * ```php
     * <?php
     * $I->checkOption('#agree');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::checkOption()
     *
     * @param mixed $option
     */
    public function checkOption($option): void
    {
        $this->getScenario()->runStep(new Action('checkOption', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unticks a checkbox.
     *
     * ```php
     * <?php
     * $I->uncheckOption('#notify');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::uncheckOption()
     *
     * @param mixed $option
     */
    public function uncheckOption($option): void
    {
        $this->getScenario()->runStep(new Action('uncheckOption', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Attaches a file relative to the Codeception `_data` directory to the given file upload field.
     *
     * ```php
     * <?php
     * // file is stored in 'tests/_data/prices.xls'
     * $I->attachFile('input[@var="file"]', 'prices.xls');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::attachFile()
     *
     * @param mixed $field
     * @param string $filename
     */
    public function attachFile($field, string $filename): void
    {
        $this->getScenario()->runStep(new Action('attachFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax GET request with the passed parameters.
     * See `sendAjaxPostRequest()`
     *
     * @see \Codeception\Lib\InnerBrowser::sendAjaxGetRequest()
     *
     * @param string $uri
     * @param array $params
     */
    public function sendAjaxGetRequest(string $uri, array $params = []): void
    {
        $this->getScenario()->runStep(new Action('sendAjaxGetRequest', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax POST request with the passed parameters.
     * The appropriate HTTP header is added automatically:
     * `X-Requested-With: XMLHttpRequest`
     * Example:
     * ``` php
     * <?php
     * $I->sendAjaxPostRequest('/add-task', ['task' => 'lorem ipsum']);
     * ```
     * Some frameworks (e.g. Symfony) create field names in the form of an "array":
     * `<input type="text" name="form[task]">`
     * In this case you need to pass the fields like this:
     * ``` php
     * <?php
     * $I->sendAjaxPostRequest('/add-task', ['form' => [
     *     'task' => 'lorem ipsum',
     *     'category' => 'miscellaneous',
     * ]]);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::sendAjaxPostRequest()
     *
     * @param string $uri
     * @param array $params
     */
    public function sendAjaxPostRequest(string $uri, array $params = []): void
    {
        $this->getScenario()->runStep(new Action('sendAjaxPostRequest', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax request, using the passed HTTP method.
     * See `sendAjaxPostRequest()`
     * Example:
     * ``` php
     * <?php
     * $I->sendAjaxRequest('PUT', '/posts/7', ['title' => 'new title']);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::sendAjaxRequest()
     *
     * @param string $method
     * @param string $uri
     * @param array $params
     */
    public function sendAjaxRequest(string $method, string $uri, array $params = []): void
    {
        $this->getScenario()->runStep(new Action('sendAjaxRequest', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Use this method within an [interactive pause](https://codeception.com/docs/02-GettingStarted#Interactive-Pause) to save the HTML source code of the current page.
     *
     * ```php
     * <?php
     * $I->makeHtmlSnapshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.html
     * $I->makeHtmlSnapshot();
     * // saved to: tests/_output/debug/2017-05-26_14-24-11_4b3403665fea6.html
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::makeHtmlSnapshot()
     *
     * @param ?string $name
     */
    public function makeHtmlSnapshot(?string $name = null): void
    {
        $this->getScenario()->runStep(new Action('makeHtmlSnapshot', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Finds and returns the text contents of the given element.
     * If a fuzzy locator is used, the element is found using CSS, XPath,
     * and by matching the full page source by regular expression.
     *
     * ```php
     * <?php
     * $heading = $I->grabTextFrom('h1');
     * $heading = $I->grabTextFrom('descendant-or-self::h1');
     * $value = $I->grabTextFrom('~<input value=(.*?)]~sgi'); // match with a regex
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::grabTextFrom()
     *
     * @param mixed $cssOrXPathOrRegex
     */
    public function grabTextFrom($cssOrXPathOrRegex): mixed
    {
        return $this->getScenario()->runStep(new Action('grabTextFrom', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the value of the given attribute value from the given HTML element. For some attributes, the string `true` is returned instead of their literal value (e.g. `disabled="disabled"` or `required="required"`).
     * Fails if the element is not found. Returns `null` if the attribute is not present on the element.
     *
     * ```php
     * <?php
     * $I->grabAttributeFrom('#tooltip', 'title');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::grabAttributeFrom()
     *
     * @param mixed $cssOrXpath
     * @param string $attribute
     */
    public function grabAttributeFrom($cssOrXpath, string $attribute): mixed
    {
        return $this->getScenario()->runStep(new Action('grabAttributeFrom', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs either the text content, or attribute values, of nodes
     * matched by $cssOrXpath and returns them as an array.
     *
     * ```html
     * <a href="#first">First</a>
     * <a href="#second">Second</a>
     * <a href="#third">Third</a>
     * ```
     *
     * ```php
     * <?php
     * // would return ['First', 'Second', 'Third']
     * $aLinkText = $I->grabMultiple('a');
     *
     * // would return ['#first', '#second', '#third']
     * $aLinks = $I->grabMultiple('a', 'href');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::grabMultiple()
     *
     * @param mixed $cssOrXpath
     * @param ?string $attribute
     * @return string[]
     */
    public function grabMultiple($cssOrXpath, ?string $attribute = null): array
    {
        return $this->getScenario()->runStep(new Action('grabMultiple', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Finds the value for the given form field.
     * If a fuzzy locator is used, the field is found by field name, CSS, and XPath.
     *
     * ```php
     * <?php
     * $name = $I->grabValueFrom('Name');
     * $name = $I->grabValueFrom('input[name=username]');
     * $name = $I->grabValueFrom('descendant-or-self::form/descendant::input[@name = 'username']');
     * $name = $I->grabValueFrom(['name' => 'username']);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::grabValueFrom()
     *
     * @param mixed $field
     */
    public function grabValueFrom($field): mixed
    {
        return $this->getScenario()->runStep(new Action('grabValueFrom', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs a cookie value.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     * If the cookie is set by an ajax request (XMLHttpRequest), there might be some delay caused by the browser, so try `$I->wait(0.1)`.
     *
     * @see \Codeception\Lib\InnerBrowser::grabCookie()
     *
     * @param string $cookie
     * @param array $params
     */
    public function grabCookie(string $cookie, array $params = []): mixed
    {
        return $this->getScenario()->runStep(new Action('grabCookie', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs current page source code.
     *
     * @throws ModuleException if no page was opened
     * @return string current page source code
     *
     * @see \Codeception\Lib\InnerBrowser::grabPageSource()
     */
    public function grabPageSource(): string
    {
        return $this->getScenario()->runStep(new Action('grabPageSource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ```php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeCookie()
     *
     * @param mixed $cookie
     * @param mixed $params
     * @return mixed|void
     */
    public function seeCookie($cookie, $params = [])
    {
        return $this->getScenario()->runStep(new Assertion('seeCookie', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ```php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeCookie()
     *
     * @param mixed $cookie
     * @param mixed $params
     * @return mixed|void
     */
    public function canSeeCookie($cookie, $params = [])
    {
        return $this->getScenario()->runStep(new ConditionalAssertion('seeCookie', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCookie()
     *
     * @param mixed $cookie
     * @param mixed $params
     * @return mixed|void
     */
    public function dontSeeCookie($cookie, $params = [])
    {
        return $this->getScenario()->runStep(new Action('dontSeeCookie', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCookie()
     *
     * @param mixed $cookie
     * @param mixed $params
     * @return mixed|void
     */
    public function cantSeeCookie($cookie, $params = [])
    {
        return $this->getScenario()->runStep(new ConditionalAssertion('dontSeeCookie', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unsets cookie with the given name.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @see \Codeception\Lib\InnerBrowser::resetCookie()
     *
     * @param mixed $cookie
     * @param mixed $params
     * @return mixed|void
     */
    public function resetCookie($cookie, $params = [])
    {
        return $this->getScenario()->runStep(new Action('resetCookie', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     * Only works if `<html>` tag is present.
     *
     * ```php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeElement()
     *
     * @param mixed $selector
     * @param array $attributes
     */
    public function seeElement($selector, array $attributes = []): void
    {
        $this->getScenario()->runStep(new Assertion('seeElement', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     * Only works if `<html>` tag is present.
     *
     * ```php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeElement()
     *
     * @param mixed $selector
     * @param array $attributes
     */
    public function canSeeElement($selector, array $attributes = []): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeElement', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ```php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeElement()
     *
     * @param mixed $selector
     * @param array $attributes
     */
    public function dontSeeElement($selector, array $attributes = []): void
    {
        $this->getScenario()->runStep(new Action('dontSeeElement', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ```php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeElement()
     *
     * @param mixed $selector
     * @param array $attributes
     */
    public function cantSeeElement($selector, array $attributes = []): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeElement', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ```php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ```
     *
     * @param mixed $selector
     * @param int|int[] $expected
     *
     * @see \Codeception\Lib\InnerBrowser::seeNumberOfElements()
     */
    public function seeNumberOfElements($selector, $expected): void
    {
        $this->getScenario()->runStep(new Assertion('seeNumberOfElements', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ```php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ```
     *
     * @param mixed $selector
     * @param int|int[] $expected
     *
     * @see \Codeception\Lib\InnerBrowser::seeNumberOfElements()
     */
    public function canSeeNumberOfElements($selector, $expected): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeNumberOfElements', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is selected.
     *
     * ```php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeOptionIsSelected()
     *
     * @param mixed $selector
     * @param mixed $optionText
     * @return mixed|void
     */
    public function seeOptionIsSelected($selector, $optionText)
    {
        return $this->getScenario()->runStep(new Assertion('seeOptionIsSelected', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given option is selected.
     *
     * ```php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeOptionIsSelected()
     *
     * @param mixed $selector
     * @param mixed $optionText
     * @return mixed|void
     */
    public function canSeeOptionIsSelected($selector, $optionText)
    {
        return $this->getScenario()->runStep(new ConditionalAssertion('seeOptionIsSelected', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is not selected.
     *
     * ```php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeOptionIsSelected()
     *
     * @param mixed $selector
     * @param mixed $optionText
     * @return mixed|void
     */
    public function dontSeeOptionIsSelected($selector, $optionText)
    {
        return $this->getScenario()->runStep(new Action('dontSeeOptionIsSelected', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given option is not selected.
     *
     * ```php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeOptionIsSelected()
     *
     * @param mixed $selector
     * @param mixed $optionText
     * @return mixed|void
     */
    public function cantSeeOptionIsSelected($selector, $optionText)
    {
        return $this->getScenario()->runStep(new ConditionalAssertion('dontSeeOptionIsSelected', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that current page has 404 response status code.
     *
     * @see \Codeception\Lib\InnerBrowser::seePageNotFound()
     */
    public function seePageNotFound(): void
    {
        $this->getScenario()->runStep(new Assertion('seePageNotFound', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that current page has 404 response status code.
     *
     * @see \Codeception\Lib\InnerBrowser::seePageNotFound()
     */
    public function canSeePageNotFound(): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seePageNotFound', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->seeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->seeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIs()
     *
     * @param int $code
     */
    public function seeResponseCodeIs(int $code): void
    {
        $this->getScenario()->runStep(new Assertion('seeResponseCodeIs', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->seeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->seeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIs()
     *
     * @param int $code
     */
    public function canSeeResponseCodeIs(int $code): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeResponseCodeIs', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is between a certain range. Between actually means [from <= CODE <= to]
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsBetween()
     *
     * @param int $from
     * @param int $to
     */
    public function seeResponseCodeIsBetween(int $from, int $to): void
    {
        $this->getScenario()->runStep(new Assertion('seeResponseCodeIsBetween', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is between a certain range. Between actually means [from <= CODE <= to]
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsBetween()
     *
     * @param int $from
     * @param int $to
     */
    public function canSeeResponseCodeIsBetween(int $from, int $to): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeResponseCodeIsBetween', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeResponseCodeIs()
     *
     * @param int $code
     */
    public function dontSeeResponseCodeIs(int $code): void
    {
        $this->getScenario()->runStep(new Action('dontSeeResponseCodeIs', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeResponseCodeIs()
     *
     * @param int $code
     */
    public function cantSeeResponseCodeIs(int $code): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeResponseCodeIs', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code 2xx
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsSuccessful()
     */
    public function seeResponseCodeIsSuccessful(): void
    {
        $this->getScenario()->runStep(new Assertion('seeResponseCodeIsSuccessful', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code 2xx
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsSuccessful()
     */
    public function canSeeResponseCodeIsSuccessful(): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeResponseCodeIsSuccessful', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code 3xx
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsRedirection()
     */
    public function seeResponseCodeIsRedirection(): void
    {
        $this->getScenario()->runStep(new Assertion('seeResponseCodeIsRedirection', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code 3xx
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsRedirection()
     */
    public function canSeeResponseCodeIsRedirection(): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeResponseCodeIsRedirection', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 4xx
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsClientError()
     */
    public function seeResponseCodeIsClientError(): void
    {
        $this->getScenario()->runStep(new Assertion('seeResponseCodeIsClientError', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 4xx
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsClientError()
     */
    public function canSeeResponseCodeIsClientError(): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeResponseCodeIsClientError', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 5xx
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsServerError()
     */
    public function seeResponseCodeIsServerError(): void
    {
        $this->getScenario()->runStep(new Assertion('seeResponseCodeIsServerError', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 5xx
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsServerError()
     */
    public function canSeeResponseCodeIsServerError(): void
    {
        $this->getScenario()->runStep(new ConditionalAssertion('seeResponseCodeIsServerError', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title contains the given string.
     *
     * ```php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeInTitle()
     *
     * @param mixed $title
     * @return mixed|void
     */
    public function seeInTitle($title)
    {
        return $this->getScenario()->runStep(new Assertion('seeInTitle', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page title contains the given string.
     *
     * ```php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::seeInTitle()
     *
     * @param mixed $title
     * @return mixed|void
     */
    public function canSeeInTitle($title)
    {
        return $this->getScenario()->runStep(new ConditionalAssertion('seeInTitle', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title does not contain the given string.
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInTitle()
     *
     * @param mixed $title
     * @return mixed|void
     */
    public function dontSeeInTitle($title)
    {
        return $this->getScenario()->runStep(new Action('dontSeeInTitle', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page title does not contain the given string.
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInTitle()
     *
     * @param mixed $title
     * @return mixed|void
     */
    public function cantSeeInTitle($title)
    {
        return $this->getScenario()->runStep(new ConditionalAssertion('dontSeeInTitle', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Switch to iframe or frame on the page.
     *
     * Example:
     * ``` html
     * <iframe name="another_frame" src="http://example.com">
     * ```
     *
     * ``` php
     * <?php
     * # switch to iframe
     * $I->switchToIframe("another_frame");
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::switchToIframe()
     *
     * @param string $name
     */
    public function switchToIframe(string $name): void
    {
        $this->getScenario()->runStep(new Action('switchToIframe', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Moves back in history.
     *
     * @param int $numberOfSteps (default value 1)
     *
     * @see \Codeception\Lib\InnerBrowser::moveBack()
     */
    public function moveBack(int $numberOfSteps = 1): void
    {
        $this->getScenario()->runStep(new Action('moveBack', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets SERVER parameters valid for all next requests.
     * this will remove old ones.
     *
     * ```php
     * $I->setServerParameters([]);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::setServerParameters()
     *
     * @param array $params
     */
    public function setServerParameters(array $params): void
    {
        $this->getScenario()->runStep(new Action('setServerParameters', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets SERVER parameter valid for all next requests.
     *
     * ```php
     * $I->haveServerParameter('name', 'value');
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::haveServerParameter()
     *
     * @param string $name
     * @param string $value
     */
    public function haveServerParameter(string $name, string $value): void
    {
        $this->getScenario()->runStep(new Action('haveServerParameter', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Prevents automatic redirects to be followed by the client.
     *
     * ```php
     * <?php
     * $I->stopFollowingRedirects();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::stopFollowingRedirects()
     */
    public function stopFollowingRedirects(): void
    {
        $this->getScenario()->runStep(new Action('stopFollowingRedirects', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Enables automatic redirects to be followed by the client.
     *
     * ```php
     * <?php
     * $I->startFollowingRedirects();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::startFollowingRedirects()
     */
    public function startFollowingRedirects(): void
    {
        $this->getScenario()->runStep(new Action('startFollowingRedirects', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Follow pending redirect if there is one.
     *
     * ```php
     * <?php
     * $I->followRedirect();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::followRedirect()
     */
    public function followRedirect(): void
    {
        $this->getScenario()->runStep(new Action('followRedirect', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets the maximum number of redirects that the Client can follow.
     *
     * ```php
     * <?php
     * $I->setMaxRedirects(2);
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::setMaxRedirects()
     *
     * @param int $maxRedirects
     */
    public function setMaxRedirects(int $maxRedirects): void
    {
        $this->getScenario()->runStep(new Action('setMaxRedirects', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks throwables (Exceptions/Errors) called inside the callback function.
     * Either throwable class name or throwable instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectThrowable(MyThrowable::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectThrowable(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or throwable code, you can pass them with throwable instance:
     * ```php
     * <?php
     * // will check that throwable MyError is thrown with "Don't do bad things" message
     * $I->expectThrowable(new MyError("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param string|Throwable $throwable
     * @param callable $callback
     *
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function expectThrowable($throwable, callable $callback): void
    {
        $this->getScenario()->runStep(new Action('expectThrowable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file does not exist.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotExists()
     *
     * @param string $filename
     * @param string $message
     */
    public function assertFileNotExists(string $filename, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileNotExists', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than or equal to another value.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterOrEquals()
     */
    public function assertGreaterOrEquals($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertGreaterOrEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is empty.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsEmpty()
     */
    public function assertIsEmpty($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsEmpty', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessOrEquals()
     */
    public function assertLessOrEquals($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertLessOrEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given regular expression.
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotRegExp()
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     */
    public function assertNotRegExp(string $pattern, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotRegExp', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given regular expression.
     *
     * @see \Codeception\Module\AbstractAsserts::assertRegExp()
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     */
    public function assertRegExp(string $pattern, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertRegExp', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param mixed $value
     * @param Constraint $constraint
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertThatItsNot()
     */
    public function assertThatItsNot($value, Constraint $constraint, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertThatItsNot', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an array has a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertArrayHasKey()
     */
    public function assertArrayHasKey($key, $array, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertArrayHasKey', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an array does not have a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertArrayNotHasKey()
     */
    public function assertArrayNotHasKey($key, $array, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertArrayNotHasKey', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class has a specified attribute.
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassHasAttribute()
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     */
    public function assertClassHasAttribute(string $attributeName, string $className, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertClassHasAttribute', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class has a specified static attribute.
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     */
    public function assertClassHasStaticAttribute(string $attributeName, string $className, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertClassHasStaticAttribute', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class does not have a specified attribute.
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     */
    public function assertClassNotHasAttribute(string $attributeName, string $className, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertClassNotHasAttribute', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class does not have a specified static attribute.
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     */
    public function assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertClassNotHasStaticAttribute', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains a needle.
     *
     * @param mixed $needle
     * @param iterable $haystack
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertContains()
     */
    public function assertContains($needle, iterable $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertContains', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param mixed $needle
     * @param iterable $haystack
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsEquals()
     */
    public function assertContainsEquals($needle, iterable $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertContainsEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains only values of a given type.
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnly()
     *
     * @param string $type
     * @param iterable $haystack
     * @param ?bool $isNativeType
     * @param string $message
     */
    public function assertContainsOnly(string $type, iterable $haystack, ?bool $isNativeType = null, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertContainsOnly', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains only instances of a given class name.
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()
     *
     * @param string $className
     * @param iterable $haystack
     * @param string $message
     */
    public function assertContainsOnlyInstancesOf(string $className, iterable $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertContainsOnlyInstancesOf', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertCount()
     */
    public function assertCount(int $expectedCount, $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertCount', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory does not exist.
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()
     *
     * @param string $directory
     * @param string $message
     */
    public function assertDirectoryDoesNotExist(string $directory, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertDirectoryDoesNotExist', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists.
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryExists()
     *
     * @param string $directory
     * @param string $message
     */
    public function assertDirectoryExists(string $directory, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertDirectoryExists', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is not readable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()
     *
     * @param string $directory
     * @param string $message
     */
    public function assertDirectoryIsNotReadable(string $directory, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertDirectoryIsNotReadable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is not writable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()
     *
     * @param string $directory
     * @param string $message
     */
    public function assertDirectoryIsNotWritable(string $directory, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertDirectoryIsNotWritable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is readable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()
     *
     * @param string $directory
     * @param string $message
     */
    public function assertDirectoryIsReadable(string $directory, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertDirectoryIsReadable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is writable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()
     *
     * @param string $directory
     * @param string $message
     */
    public function assertDirectoryIsWritable(string $directory, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertDirectoryIsWritable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given regular expression.
     *
     * @see \Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     */
    public function assertDoesNotMatchRegularExpression(string $pattern, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertDoesNotMatchRegularExpression', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is empty.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertEmpty()
     */
    public function assertEmpty($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertEmpty', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertEquals()
     */
    public function assertEquals($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (canonicalizing).
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()
     */
    public function assertEqualsCanonicalizing($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertEqualsCanonicalizing', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (ignoring case).
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()
     */
    public function assertEqualsIgnoringCase($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertEqualsIgnoringCase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (with delta).
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param float $delta
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsWithDelta()
     */
    public function assertEqualsWithDelta($expected, $actual, float $delta, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertEqualsWithDelta', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is false.
     *
     * @param mixed $condition
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertFalse()
     */
    public function assertFalse($condition, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFalse', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file does not exist.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileDoesNotExist()
     *
     * @param string $filename
     * @param string $message
     */
    public function assertFileDoesNotExist(string $filename, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileDoesNotExist', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEquals()
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     */
    public function assertFileEquals(string $expected, string $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file (canonicalizing).
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     */
    public function assertFileEqualsCanonicalizing(string $expected, string $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileEqualsCanonicalizing', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file (ignoring case).
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     */
    public function assertFileEqualsIgnoringCase(string $expected, string $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileEqualsIgnoringCase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileExists()
     *
     * @param string $filename
     * @param string $message
     */
    public function assertFileExists(string $filename, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileExists', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is not readable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotReadable()
     *
     * @param string $file
     * @param string $message
     */
    public function assertFileIsNotReadable(string $file, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileIsNotReadable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is not writable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotWritable()
     *
     * @param string $file
     * @param string $message
     */
    public function assertFileIsNotWritable(string $file, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileIsNotWritable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is readable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsReadable()
     *
     * @param string $file
     * @param string $message
     */
    public function assertFileIsReadable(string $file, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileIsReadable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is writable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsWritable()
     *
     * @param string $file
     * @param string $message
     */
    public function assertFileIsWritable(string $file, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileIsWritable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file.
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEquals()
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     */
    public function assertFileNotEquals(string $expected, string $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileNotEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file (canonicalizing).
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     */
    public function assertFileNotEqualsCanonicalizing(string $expected, string $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileNotEqualsCanonicalizing', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file (ignoring case).
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     */
    public function assertFileNotEqualsIgnoringCase(string $expected, string $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFileNotEqualsIgnoringCase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is finite.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertFinite()
     */
    public function assertFinite($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertFinite', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than another value.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThan()
     */
    public function assertGreaterThan($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertGreaterThan', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than or equal to another value.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()
     */
    public function assertGreaterThanOrEqual($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertGreaterThanOrEqual', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is infinite.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertInfinite()
     */
    public function assertInfinite($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertInfinite', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of a given type.
     *
     * @param string $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertInstanceOf()
     */
    public function assertInstanceOf(string $expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertInstanceOf', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type array.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsArray()
     */
    public function assertIsArray($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsArray', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type bool.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsBool()
     */
    public function assertIsBool($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsBool', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type callable.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsCallable()
     */
    public function assertIsCallable($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsCallable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type resource and is closed.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsClosedResource()
     */
    public function assertIsClosedResource($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsClosedResource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type float.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsFloat()
     */
    public function assertIsFloat($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsFloat', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type int.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsInt()
     */
    public function assertIsInt($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsInt', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type iterable.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsIterable()
     */
    public function assertIsIterable($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsIterable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type array.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotArray()
     */
    public function assertIsNotArray($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotArray', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type bool.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotBool()
     */
    public function assertIsNotBool($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotBool', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type callable.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotCallable()
     */
    public function assertIsNotCallable($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotCallable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type resource.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotClosedResource()
     */
    public function assertIsNotClosedResource($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotClosedResource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type float.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotFloat()
     */
    public function assertIsNotFloat($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotFloat', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type int.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotInt()
     */
    public function assertIsNotInt($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotInt', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type iterable.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotIterable()
     */
    public function assertIsNotIterable($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotIterable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type numeric.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotNumeric()
     */
    public function assertIsNotNumeric($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotNumeric', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type object.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotObject()
     */
    public function assertIsNotObject($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotObject', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is not readable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotReadable()
     *
     * @param string $filename
     * @param string $message
     */
    public function assertIsNotReadable(string $filename, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotReadable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type resource.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotResource()
     */
    public function assertIsNotResource($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotResource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type scalar.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotScalar()
     */
    public function assertIsNotScalar($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotScalar', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type string.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotString()
     */
    public function assertIsNotString($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotString', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is not writable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotWritable()
     *
     * @param string $filename
     * @param string $message
     */
    public function assertIsNotWritable(string $filename, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNotWritable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type numeric.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNumeric()
     */
    public function assertIsNumeric($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsNumeric', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type object.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsObject()
     */
    public function assertIsObject($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsObject', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir is readable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsReadable()
     *
     * @param string $filename
     * @param string $message
     */
    public function assertIsReadable(string $filename, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsReadable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type resource.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsResource()
     */
    public function assertIsResource($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsResource', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type scalar.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsScalar()
     */
    public function assertIsScalar($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsScalar', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type string.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsString()
     */
    public function assertIsString($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsString', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is writable.
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsWritable()
     *
     * @param string $filename
     * @param string $message
     */
    public function assertIsWritable(string $filename, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertIsWritable', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string is a valid JSON string.
     *
     * @see \Codeception\Module\AbstractAsserts::assertJson()
     *
     * @param string $actualJson
     * @param string $message
     */
    public function assertJson(string $actualJson, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertJson', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two JSON files are equal.
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     */
    public function assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertJsonFileEqualsJsonFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two JSON files are not equal.
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     */
    public function assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertJsonFileNotEqualsJsonFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the generated JSON encoded object and the content of the given file are equal.
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     */
    public function assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertJsonStringEqualsJsonFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two given JSON encoded objects or arrays are equal.
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     */
    public function assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertJsonStringEqualsJsonString', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the generated JSON encoded object and the content of the given file are not equal.
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     */
    public function assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertJsonStringNotEqualsJsonFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two given JSON encoded objects or arrays are not equal.
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     */
    public function assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertJsonStringNotEqualsJsonString', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than another value.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessThan()
     */
    public function assertLessThan($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertLessThan', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessThanOrEqual()
     */
    public function assertLessThanOrEqual($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertLessThanOrEqual', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given regular expression.
     *
     * @see \Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     */
    public function assertMatchesRegularExpression(string $pattern, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertMatchesRegularExpression', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is nan.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNan()
     */
    public function assertNan($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNan', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack does not contain a needle.
     *
     * @param mixed $needle
     * @param iterable $haystack
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContains()
     */
    public function assertNotContains($needle, iterable $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotContains', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsEquals()
     *
     * @param mixed $needle
     * @param iterable $haystack
     * @param string $message
     */
    public function assertNotContainsEquals($needle, iterable $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotContainsEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack does not contain only values of a given type.
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsOnly()
     *
     * @param string $type
     * @param iterable $haystack
     * @param ?bool $isNativeType
     * @param string $message
     */
    public function assertNotContainsOnly(string $type, iterable $haystack, ?bool $isNativeType = null, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotContainsOnly', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotCount()
     */
    public function assertNotCount(int $expectedCount, $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotCount', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not empty.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEmpty()
     */
    public function assertNotEmpty($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotEmpty', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEquals()
     */
    public function assertNotEquals($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotEquals', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (canonicalizing).
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()
     */
    public function assertNotEqualsCanonicalizing($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotEqualsCanonicalizing', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (ignoring case).
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()
     */
    public function assertNotEqualsIgnoringCase($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotEqualsIgnoringCase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (with delta).
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param float $delta
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()
     */
    public function assertNotEqualsWithDelta($expected, $actual, float $delta, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotEqualsWithDelta', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is not false.
     *
     * @param mixed $condition
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotFalse()
     */
    public function assertNotFalse($condition, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotFalse', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of a given type.
     *
     * @param string $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotInstanceOf()
     */
    public function assertNotInstanceOf(string $expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotInstanceOf', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not null.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotNull()
     */
    public function assertNotNull($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotNull', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables do not have the same type and value.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotSame()
     */
    public function assertNotSame($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotSame', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is not the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotSameSize()
     */
    public function assertNotSameSize($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotSameSize', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is not true.
     *
     * @param mixed $condition
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotTrue()
     */
    public function assertNotTrue($condition, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNotTrue', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is null.
     *
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertNull()
     */
    public function assertNull($actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertNull', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an object has a specified attribute.
     *
     * @see \Codeception\Module\AbstractAsserts::assertObjectHasAttribute()
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     */
    public function assertObjectHasAttribute(string $attributeName, object $object, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertObjectHasAttribute', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an object does not have a specified attribute.
     *
     * @see \Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     */
    public function assertObjectNotHasAttribute(string $attributeName, object $object, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertObjectNotHasAttribute', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables have the same type and value.
     *
     * @param mixed $expected
     * @param mixed $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertSame()
     */
    public function assertSame($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertSame', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertSameSize()
     */
    public function assertSameSize($expected, $actual, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertSameSize', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsString()
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     */
    public function assertStringContainsString(string $needle, string $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringContainsString', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     */
    public function assertStringContainsStringIgnoringCase(string $needle, string $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringContainsStringIgnoringCase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string ends not with a given suffix.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsNotWith()
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     */
    public function assertStringEndsNotWith(string $suffix, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringEndsNotWith', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string ends with a given suffix.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsWith()
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     */
    public function assertStringEndsWith(string $suffix, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringEndsWith', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFile()
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     */
    public function assertStringEqualsFile(string $expectedFile, string $actualString, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringEqualsFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file (canonicalizing).
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     */
    public function assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringEqualsFileCanonicalizing', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file (ignoring case).
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     */
    public function assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringEqualsFileIgnoringCase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given format string.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormat()
     *
     * @param string $format
     * @param string $string
     * @param string $message
     */
    public function assertStringMatchesFormat(string $format, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringMatchesFormat', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given format file.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     */
    public function assertStringMatchesFormatFile(string $formatFile, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringMatchesFormatFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsString()
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     */
    public function assertStringNotContainsString(string $needle, string $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringNotContainsString', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     */
    public function assertStringNotContainsStringIgnoringCase(string $needle, string $haystack, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringNotContainsStringIgnoringCase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     */
    public function assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringNotEqualsFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file (canonicalizing).
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     */
    public function assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringNotEqualsFileCanonicalizing', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file (ignoring case).
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     */
    public function assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringNotEqualsFileIgnoringCase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given format string.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()
     *
     * @param string $format
     * @param string $string
     * @param string $message
     */
    public function assertStringNotMatchesFormat(string $format, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringNotMatchesFormat', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given format string.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     */
    public function assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringNotMatchesFormatFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string starts not with a given prefix.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsNotWith()
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     */
    public function assertStringStartsNotWith(string $prefix, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringStartsNotWith', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string starts with a given prefix.
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsWith()
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     */
    public function assertStringStartsWith(string $prefix, string $string, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertStringStartsWith', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param mixed $value
     * @param Constraint $constraint
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertThat()
     */
    public function assertThat($value, Constraint $constraint, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertThat', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is true.
     *
     * @param mixed $condition
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertTrue()
     */
    public function assertTrue($condition, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertTrue', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML files are equal.
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     */
    public function assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertXmlFileEqualsXmlFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML files are not equal.
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     */
    public function assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertXmlFileNotEqualsXmlFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()
     */
    public function assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertXmlStringEqualsXmlFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()
     */
    public function assertXmlStringEqualsXmlString($expectedXml, $actualXml, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertXmlStringEqualsXmlString', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are not equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()
     */
    public function assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertXmlStringNotEqualsXmlFile', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are not equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()
     */
    public function assertXmlStringNotEqualsXmlString($expectedXml, $actualXml, string $message = '')
    {
        return $this->getScenario()->runStep(new Action('assertXmlStringNotEqualsXmlString', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails a test with the given message.
     *
     * @see \Codeception\Module\AbstractAsserts::fail()
     *
     * @param string $message
     */
    public function fail(string $message = '')
    {
        return $this->getScenario()->runStep(new Action('fail', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Mark the test as incomplete.
     *
     * @see \Codeception\Module\AbstractAsserts::markTestIncomplete()
     *
     * @param string $message
     */
    public function markTestIncomplete(string $message = '')
    {
        return $this->getScenario()->runStep(new Action('markTestIncomplete', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Mark the test as skipped.
     *
     * @see \Codeception\Module\AbstractAsserts::markTestSkipped()
     *
     * @param string $message
     */
    public function markTestSkipped(string $message = '')
    {
        return $this->getScenario()->runStep(new Action('markTestSkipped', func_get_args()));
    }

    /**
     * @return Scenario
     */
    abstract protected function getScenario();
}
